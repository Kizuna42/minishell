Minishellプロジェクトの課題と要件定義は以下の通りです。

**プロジェクトの概要**
* Minishellは、シンプルなシェルを作成するプロジェクトです。これは、自分自身の小さなBashを作成することに相当します。このプロジェクトを通じて、プロセスとファイルディスクリプタについて広範な知識を習得できます [cite: 1]。

必須パート

プログラム名: minishell
提出ファイル: Makefile, *.h, *.c
Makefileルール: NAME, all, clean, fclean, re
引数: なし
外部関数: readline, rl_clear_history, rl_on_new_line, rl_replace_line, rl_redisplay, add_history, printf, malloc, free, write, access, open, read, close, fork, wait, waitpid, wait3, wait4, signal, sigaction, sigemptyset, sigaddset, kill, exit, getcwd, chdir, stat, lstat, fstat, unlink, execve, dup, dup2, pipe, opendir, readdir, closedir, strerror, perror, isatty, ttyname, ttyslot, ioctl, getenv, tcsetattr, tcgetattr, tgetent, tgetflag, tgetnum, tgetstr, tgoto, tputs
Libftの使用: 許可
説明: シェルを作成する
シェルの要件:

新しいコマンドを待機する際にプロンプトを表示する 。
動作する履歴機能を持つこと 。
PATH変数に基づいて、または相対パスまたは絶対パスを使用して、適切な実行可能ファイルを見つけて起動すること 。
受け取ったシグナルを示すために、グローバル変数を最大1つ使用すること 。このグローバル変数はシグナル番号のみを格納し、追加情報やデータへのアクセスを提供してはならない 。したがって、グローバルスコープで「norm」型の構造体を使用することは禁止されている 。


閉じられていない引用符や、バックスラッシュ（\）やセミコロン（;）など、課題で要求されていない特殊文字を解釈しないこと 。
'（単一引用符）を処理し、引用符で囲まれたシーケンス内のメタ文字の解釈をシェルが防ぐようにすること 。
"（二重引用符）を処理し、$（ドル記号）を除き、引用符で囲まれたシーケンス内のメタ文字の解釈をシェルが防ぐようにすること 。
以下のリダイレクションを実装すること ：
< は入力をリダイレクトする。
> は出力をリダイレクトする。
<< はデリミタを与えられ、デリミタを含む行が見つかるまで入力を読み込む。ただし、履歴を更新する必要はない。
>> は追記モードで出力をリダイレクトする。
パイプ（|文字）を実装すること 。パイプライン内の各コマンドの出力は、パイプを介して次のコマンドの入力に接続される。
環境変数（$の後に一連の文字が続く）を処理し、それらが値に展開されるようにすること 。
$ を処理し、最近実行されたフォアグラウンドパイプラインの終了ステータスに展開されるようにすること 。
Ctrl-C、Ctrl-D、Ctrl-\ を処理し、bashと同様に動作すること 。
対話モードの場合:
Ctrl-C は新しい行に新しいプロンプトを表示する。
Ctrl-D はシェルを終了する。
Ctrl-\ は何もしない。
以下の組み込みコマンドを実装すること ：
echo （-n オプション付き）
cd （相対パスまたは絶対パスのみ）
pwd （オプションなし）
export （オプションなし）
unset （オプションなし）
env （オプションまたは引数なし）
exit （オプションなし）
readline() 関数はメモリリークを引き起こす可能性がありますが、それらを修正する必要はありません 。ただし、これはあなたが書いた独自のコードにメモリリークがあることを意味するものではありません 。

課題の記述に限定すること 。要求されていないものは不要です 。要件について疑問がある場合は、bashを参照として使用してください 。

ボーナスパート

プログラムは以下を実装すること:
&& と ||、および優先順位のための括弧 。
ワイルドカードは現在の作業ディレクトリで機能すること 。
ボーナスパートは、必須パートが完璧に完了した場合にのみ評価されます 。完璧とは、必須パートが完全に実装され、問題なく機能することを意味します 。必須要件をすべて満たしていない場合、ボーナスパートはまったく評価されません 。

提出とピア評価

いつも通り、Gitリポジトリに課題を提出すること 。防御中に評価されるのは、リポジトリ内の作業のみです 。ファイル名が正しいことを再確認することを躊躇しないでください 。
