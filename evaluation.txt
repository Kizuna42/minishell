はい、評価項目のみを文字起こしします。

--- PAGE 2 ---
Mandatory Part

Compile

- USE make -n to see if compilation use -Wall -Wextra -Werror if not use invalid compilation flags
- minishell Compile without errors if not use flags
- makefile must not re-link

--- PAGE 3 ---
Simple Command & global

- Execute a simple command with an absolute path like /bin/ls or any other command without options
- [cite_start]How many global variables? [cite: 149, 210] why? [cite_start]Give a concrete example of why it feels mandatory or logical. [cite: 149, 210]
- [cite_start]Test an empty command. [cite: 150, 211]
- [cite_start]Test only spaces or tabs. [cite: 150, 211]
- [cite_start]if something crashes use the crash flag. [cite: 151, 212]
- [cite_start]if something is not working use the incomplete work flag. [cite: 152, 213]

Arguments & history

- Execute a simple command with an absolute path like /bin/ls or any other command with arguments but without quotes and double quotes
- Repeat multiple times with different commands and arguments
- [cite_start]if something crashes use the crash flag. [cite: 153, 214]
- [cite_start]if something is not working use the incomplete work flag. [cite: 154, 215]

echo

- Execute the echo command with or without arguments or -n
- Repeat multiple times with different arguments
- [cite_start]if something crashes use the crash flag. [cite: 155, 216]
- [cite_start]if something is not working use the incomplete work flag. [cite: 156, 217]

exit

- Execute exit command with or without arguments
- Repeat multiple times with different arguments
- Don't forget to relaunch the minishell
- [cite_start]if something crashes use the crash flag. [cite: 157, 218]
- if something is not working use the incomplete work flag.

Return value of a process

--- PAGE 4 ---
- [cite_start]Execute a simple command with an absolute path like /bin/ls or any other command with arguments but without quotes and double quotes then execute echo $? [cite: 159, 220]
- [cite_start]Check the printed value. [cite: 160, 221] [cite_start]You can repeat the same in bash and compare it. [cite: 160, 221] Repeat multiple times with different commands and arguments, use some failing commands like '/bin/ls filethatdoesntexist'
- anything like expr $2+$2$
- [cite_start]if something crashes use the crash flag. [cite: 161, 222]
- [cite_start]if something is not working use the incomplete work flag. [cite: 162, 223]

Signals

- Try ctrl-C in an empty prompt should show a new line with a new prompt
- Try ctrl-\ in an empty prompt should not do anything
- [cite_start]Try ctrl-D in an empty prompt should quit minishell --> RELAUNCH! [cite: 163, 224]
- [cite_start]Try ctrl-C in a prompt after you wrote some stuff should show a new line with a new prompt [cite: 164, 225]
- Try ctrl-D in a prompt after you wrote some stuff should not do anything
- [cite_start]Try ctrl-\ in a prompt after you wrote some stuff should quit minishell --> RELAUNCH! [cite: 164, 225]
- [cite_start]Try ctrl-C after running a blocking command like cat or grep without arguments [cite: 164, 225]
- [cite_start]Try ctrl-\ after running a blocking command like cat or grep without arguments [cite: 164, 225]
- [cite_start]Try ctrl-D after running a blocking command like cat or grep without arguments [cite: 164, 225]
- Repeat multiple times with different commands
- [cite_start]if something crashes use the crash flag. [cite: 165, 226]
- [cite_start]if something is not working use the incomplete work flag. [cite: 166, 227]

Double Quotes

- Execute a simple command with arguments but this time double quotes (you should include whitespaces)
- a command like: echo "cat lol.c | cat > lol.c"
- [cite_start]anything except $. [cite: 167, 228]
- [cite_start]if something crashes use the crash flag. [cite: 167, 228]
- [cite_start]if something is not working use the incomplete work flag. [cite: 168, 229]

Simple Quotes

- Execute commands with simple quotes as an argument
- Try empty arguments
- Try environment variables, whitespaces, pipes, redirection in the simple quotes
- echo '$USER' must print $USER
- Nothing should be interprated

--- PAGE 5 ---
env

- Check if env shows you the current environment variables

export

- Export environment variables, create new ones, and replace old ones
- Check them with env

unset

- Export environment variables, create new ones, and replace old ones
- Use unset to remove some of them
- Check the result with env

cd

- Use the command cd to move the working directory and check if you are in the right directory with /bin/ls
- Repeat multiple times with working and not working cd
- try '.' '..' as arguments too

pwd

- Use the command pwd
- Repeat multiple times in multiple directories

Relative Path

- [cite_start]Execute commands but this time use a relative path [cite: 170, 231]
- Repeat multiple times in multiple directories with a complex relative path (lots of ..)

Environment Path

--- PAGE 6 ---
- [cite_start]Execute commands but this time without any path. [cite: 172, 233] [cite_start](ls, wc, awk etc...) [cite: 172, 233]
- Unset the $PATH and check if it is not working anymore
- Set the $PATH to a multiple directory value (directory1:directory2) and check that directories are checked in order from left to right

Redirection

- Execute commands with redirections < and/or >
- Repeat multiple times with different commands and arguments and sometimes change > with >>
- Check if multiple of the same redirections fail
- [cite_start]Test << redirection (it doesn't need to update history). [cite: 173, 234]

Pipes

- [cite_start]Execute commands with pipes like 'cat file | grep bla | more' [cite: 174, 235]
- Repeat multiple times with different commands and arguments
- [cite_start]Try some failing commands like 'ls filethatdoesntexist | grep bla | more' [cite: 175, 236]
- Try to mix pipes and redirections.

Go Crazy and history

- [cite_start]type a command line then use ctrl-C then press enter the buffer should be clean and nothing try to execute. [cite: 176, 237]
- [cite_start]Can we navigate through history with up and down and retry some command [cite: 176, 237]
- Execute commands that should not work like 'dsbksdgbksdghsd' and check if the shell doesn't crash and prints an error
- Try to execute a long command with a ton of arguments
- Have fun with that beautiful minishell and enjoy it

Environment Variables

- Execute echo with some $ variables as arguments
- Check that $ is interprated as an environment variable
- Check that double quotes interpolate $
- [cite_start]Check that $USER exist or set it. [cite: 177, 238]
- [cite_start]echo "$USER" should print the value of $USER [cite: 177, 238]

--- PAGE 7 ---
Bonus

- [cite_start]We will look at your bonuses if and only if your mandatory part is excellent. [cite: 179, 240] [cite_start]This means that you must complete the mandatory part, beginning to end, and your error management must be flawless, even in cases of twisted or bad usage. [cite: 180, 241] [cite_start]So if you didn't score all the points on the mandatory part during this defense bonuses will be totally ignored. [cite: 181, 242]

And, Or

- Use &&, || and parenthesis with commands and check if it works as bash

WildCard

- [cite_start]Use wildcards in arguments for the local directory. [cite: 182, 243]

Surprise (or not...)

- set USER environment variable.
- Test echo "$USER" this should print 'USER_VALUE'
- Test echo "$USER" this should print "$USER"

Ratings

- Don't forget to check the flag corresponding to the defense
    - Ok
    - Outstanding project
    - Empty work
    - No author file
    - Invalid compilation
    - Norme
    - Cheat
    - Crash
    - Leaks
    - Forbidden function

Conclusion

- Leave a comment on this evaluation